/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./URL_Shortener/static/script.js":
/*!****************************************!*\
  !*** ./URL_Shortener/static/script.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\r\n\r\nconst btn_switch_to_register = document.getElementById(\"switch_to_register_modal\")\r\nconst btn_switch_to_login = document.getElementById(\"switch_to_login_modal\")\r\nconst login_modal = document.getElementById(\"loginModal\")\r\nconst register_modal = document.getElementById(\"createAccountModal\")\r\n\r\nconst register_form = document.getElementById(\"register_form\")\r\nconst register_username = document.getElementById(\"register_username\")\r\nconst register_email = document.getElementById(\"register_email\")\r\nconst register_password = document.getElementById(\"register_password\")\r\nconst register_confirm_password = document.getElementById(\"register_confirm_password\")\r\nconst register_inputs = [register_username, register_email, register_password, register_confirm_password];\r\n\r\nconst login_form = document.getElementById(\"login_form\")\r\nconst login_email = document.getElementById(\"login_email\")\r\nconst login_password = document.getElementById(\"login_password\")\r\nconst login_inputs = [login_email, login_password];\r\n\r\nconsole.log(\"script running\")\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n    document.getElementById(\"url_form\").addEventListener(\"submit\", function (event) {\r\n        event.preventDefault();\r\n        var formData = new FormData(this);\r\n        fetch(\"/url_submit\", {\r\n            method: \"POST\",\r\n            body: formData\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.success) {\r\n                    console.log(\"Success!\")\r\n                    // window.location.href = \"/\";\r\n                    document.getElementById(\"quote\").textContent = data.quote;\r\n                    document.getElementById(\"author\").textContent = data.author;\r\n                    document.getElementById(\"url_result\").textContent = data.result;\r\n\r\n                } else {\r\n                    write_errors(this, data.errors);\r\n                }\r\n            })\r\n            .catch(error => console.error(\"Error:\", error));\r\n    });\r\n});\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n    document.getElementById(\"register_form\").addEventListener(\"submit\", function (event) {\r\n        event.preventDefault();\r\n        var formData = new FormData(this);\r\n        fetch(\"/register_submit\", {\r\n            method: \"POST\",\r\n            body: formData\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.success) {\r\n                    console.log(\"Success!\")\r\n                    window.location.href = \"/\";\r\n                } else {\r\n                    write_errors(this, data.errors);\r\n                }\r\n            })\r\n            .catch(error => console.error(\"Error:\", error));\r\n    });\r\n});\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n    document.getElementById(\"login_form\").addEventListener(\"submit\", function (event) {\r\n        event.preventDefault();\r\n        var formData = new FormData(this);\r\n        fetch(\"/login_submit\", {\r\n            method: \"POST\",\r\n            body: formData\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.success) {\r\n                    console.log(\"Success!\")\r\n                    window.location.href = \"/\";\r\n                } else {\r\n                    write_errors(this, data.errors);\r\n                }\r\n            })\r\n            .catch(error => console.error(\"Error:\", error));\r\n    });\r\n});\r\n\r\nfunction write_errors(form, errors) {\r\n    form.querySelectorAll(\".invalid-feedback\").forEach(element => element.remove());\r\n    form.querySelectorAll(\".is-invalid\").forEach(element => element.classList.remove(\"is-invalid\"));\r\n    Object.keys(errors).forEach(function (key) {\r\n        var value = errors[key];\r\n        if (value.length !== 0) {\r\n            var input = document.getElementById(form.id.split(\"_\")[0] + \"_\" + key);\r\n            console.log(form.id.split(\"_\")[0] + \"_\" + key)\r\n            console.log(input)\r\n            input.classList.add(\"is-invalid\");\r\n            value.forEach(item => {\r\n                var new_error = document.createElement('div');\r\n                new_error.classList.add(\"invalid-feedback\");\r\n                new_error.textContent = item;\r\n                input.parentNode.insertBefore(new_error, input.nextSibling);\r\n            })\r\n\r\n        }\r\n    });\r\n}\r\n\r\n// Function to switch between modals\r\nbtn_switch_to_register.addEventListener(\"click\", function () {\r\n    $(\"#loginModal\").modal(\"hide\");\r\n    $(\"#createAccountModal\").modal(\"show\");\r\n});\r\n\r\nbtn_switch_to_login.addEventListener(\"click\", function () {\r\n    $(\"#createAccountModal\").modal(\"hide\");\r\n    $(\"#loginModal\").modal(\"show\");\r\n});\r\n\r\n\r\n// login_form.addEventListener(\"submit\", async (event) => {\r\n//     console.log(\"clicked\")\r\n//     event.preventDefault();\r\n//     var errors = presence_check(login_inputs);\r\n//     try {\r\n//         // make call to flask route\r\n//         var response = await fetch('/submit-login', {\r\n//             method: \"GET\",\r\n//             headers: {\r\n//                 'Content-Type': 'application/json'\r\n//             },\r\n//         });\r\n//         if (!response.ok) {\r\n//             throw new Error(`HTTP error! Status: ${response.status}`);\r\n//         }\r\n\r\n//         // get data and add errors if exist\r\n//         var data = await response.json();\r\n//         if (data.username === false) {\r\n//             errors.push({ \"input\": login_email, \"error\": \"There is no account with this email\" })\r\n//         }\r\n//         else if (data.password === false) {\r\n//             errors.push({ \"input\": login_password, \"error\": \"Incorrect Password\" })\r\n//         }\r\n\r\n//         // either write feedback elements or submit form\r\n//         if (errors.length !== 0) {\r\n//             event.preventDefault();\r\n//             write_errors(register_form, errors);\r\n//             return false;\r\n//         } else {\r\n//             event.currentTarget.submit();\r\n//         }\r\n//     }\r\n//     catch (error) {\r\n//         console.error('Error:', error);\r\n//     };\r\n// })\r\n\r\n// register_form.addEventListener(\"submit\", (event) => {\r\n//     // presence check for all fields\r\n//     var errors = presence_check(register_inputs);\r\n//     // emails\r\n//     if (!validator.isEmail(register_email.value)) {\r\n//         errors.push({ \"input\": register_email, \"error\": \"Please enter a valid email address\" })\r\n//     } else {\r\n//         // CHeck if email exists in db\r\n//         console.log(\"fetch database check\")\r\n//         fetch('/submit-registration', {\r\n//             method: \"GET\",\r\n//             headers: {\r\n//                 'Content-Type': 'application/json'\r\n//                 // You can add additional headers if needed\r\n//             },\r\n//         })\r\n//             .then(response => response.json())\r\n//             .then(data => {\r\n//                 if (data.value === true) {\r\n//                     errors.push({ \"input\": register_email, \"error\": \"There is already an account with this email\" })\r\n//                 }\r\n//             })\r\n//             .catch(error => {\r\n//                 console.error('Error:', error);\r\n//             });\r\n//     }\r\n\r\n//     // passwords\r\n//     if (!validator.isStrongPassword(register_password.value)) {\r\n//         errors.push({ \"input\": register_password, \"error\": \"Your password is not strong enough\" })\r\n//     }\r\n//     if (register_password.value !== register_confirm_password.value) {\r\n//         errors.push({ \"input\": register_confirm_password, \"error\": \"Passwords must match exactly\" })\r\n//     }\r\n\r\n//     // either write feedback elements or submit form\r\n//     if (errors.length !== 0) {\r\n//         event.preventDefault();\r\n//         write_errors(register_form, errors);\r\n//         return false;\r\n//     } else {\r\n//         event.currentTarget.submit();\r\n//     }\r\n\r\n// })\r\n\r\n\r\n\r\n// function presence_check(inputs) {\r\n//     var errors = []\r\n//     inputs.forEach(input => {\r\n//         if (input.value === \"\") {\r\n//             var error = { \"input\": input, \"error\": \"This field is required\" }\r\n//             errors.push(error);\r\n//         }\r\n//     })\r\n//     return errors\r\n// }\r\n\r\n// function write_errors(form, errors) {\r\n//     // remove previous errors\r\n//     form.querySelectorAll(\".invalid-feedback\").forEach(element => element.remove());\r\n//     register_form.querySelectorAll(\".is-invalid\").forEach(element => element.classList.remove(\"is-invalid\"));\r\n\r\n//     errors.forEach(error => {\r\n//         // input styling\r\n//         error.input.classList.add(\"is-invalid\");\r\n//         // add list of errors in divs\r\n//         var new_error = document.createElement(\"div\");\r\n//         new_error.classList.add(\"invalid-feedback\");\r\n//         var new_error_text = document.createTextNode(error.error);\r\n//         new_error.appendChild(new_error_text);\r\n//         error.input.parentElement.appendChild(new_error);\r\n//     })\r\n// }\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://url_shortener/./URL_Shortener/static/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./URL_Shortener/static/script.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;